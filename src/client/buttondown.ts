/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/exports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Exports */
    get: operations["api_views_exports_list_exports"];
    put?: never;
    /** Create Export */
    post: operations["api_views_exports_create_export"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/exports/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Export */
    get: operations["api_views_exports_retrieve_export"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Tags */
    get: operations["api_views_subscriber_tags_list_tags"];
    put?: never;
    /** Create Tag */
    post: operations["api_views_subscriber_tags_create_tag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Tag */
    get: operations["api_views_subscriber_tags_retrieve_tag"];
    put?: never;
    post?: never;
    /** Delete Tag */
    delete: operations["api_views_subscriber_tags_delete_tag"];
    options?: never;
    head?: never;
    /** Update Tag */
    patch: operations["api_views_subscriber_tags_update_tag"];
    trace?: never;
  };
  "/tags/{id}/analytics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Tag Analytics */
    get: operations["api_views_subscriber_tags_retrieve_tag_analytics"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ping": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Ping */
    get: operations["api_views_ping_ping"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/images": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create Image */
    post: operations["api_views_images_create_image"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/images/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete Image */
    delete: operations["api_views_images_delete_image"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/emails": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Emails */
    get: operations["api_views_emails_routes_list_emails"];
    put?: never;
    /** Create Email */
    post: operations["api_views_emails_routes_create_email"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/emails/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Email */
    get: operations["api_views_emails_routes_retrieve_email"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update Email */
    patch: operations["api_views_emails_routes_update_email"];
    trace?: never;
  };
  "/emails/{id}/history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Email History */
    get: operations["api_views_emails_routes_retrieve_email_history"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/emails/{id}/analytics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Email Analytics */
    get: operations["api_views_emails_routes_retrieve_email_analytics"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/emails/{id}/send-draft": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send Draft */
    post: operations["api_views_emails_routes_send_draft"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subscribers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Subscribers */
    get: operations["api_views_subscribers_routes_list_subscribers"];
    put?: never;
    /** Create Subscriber */
    post: operations["api_views_subscribers_routes_create_subscriber"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subscribers/{id_or_email}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Subscriber */
    get: operations["api_views_subscribers_routes_retrieve_subscriber"];
    put?: never;
    post?: never;
    /** Delete Subscriber */
    delete: operations["api_views_subscribers_routes_delete_subscriber"];
    options?: never;
    head?: never;
    /** Update Subscriber */
    patch: operations["api_views_subscribers_routes_update_subscriber"];
    trace?: never;
  };
  "/subscribers/{id_or_email}/send-reminder": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send Reminder */
    post: operations["api_views_subscribers_routes_send_reminder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subscribers/{id_or_email}/emails/{email_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send Email To */
    post: operations["api_views_subscribers_routes_send_email_to"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subscribers/{id_or_email}/clients": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Clients */
    get: operations["api_views_subscribers_routes_get_clients"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subscribers/{id_or_email}/referrals": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Referrals */
    get: operations["api_views_subscribers_routes_get_referrals"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subscribers/{id}/automations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Automations */
    get: operations["api_views_subscribers_routes_get_automations"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subscribers/{id_or_email}/stripe-subscriptions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Stripe Subscriptions */
    get: operations["api_views_subscribers_routes_get_stripe_subscriptions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/newsletters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Newsletters */
    get: operations["api_views_newsletters_list_newsletters"];
    put?: never;
    /** Create Newsletter */
    post: operations["api_views_newsletters_create_newsletter"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/newsletters/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete Newsletter */
    delete: operations["api_views_newsletters_delete_newsletter"];
    options?: never;
    head?: never;
    /** Update Newsletter */
    patch: operations["api_views_newsletters_update_newsletter"];
    trace?: never;
  };
  "/bulk_actions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create Bulk Action */
    post: operations["api_views_bulk_actions_create_bulk_action"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bulk_actions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Bulk Action */
    get: operations["api_views_bulk_actions_retrieve_bulk_action"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/external_feeds": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List External Feed */
    get: operations["api_views_external_feeds_routes_list_external_feed"];
    put?: never;
    /** Create External Feed */
    post: operations["api_views_external_feeds_routes_create_external_feed"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/external_feeds/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve External Feed */
    get: operations["api_views_external_feeds_routes_retrieve_external_feed"];
    put?: never;
    post?: never;
    /** Delete External Feed */
    delete: operations["api_views_external_feeds_routes_delete_external_feed"];
    options?: never;
    head?: never;
    /** Update External Feed */
    patch: operations["api_views_external_feeds_routes_update_external_feed"];
    trace?: never;
  };
  "/external_feeds/{id}/items": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Items */
    get: operations["api_views_external_feeds_routes_retrieve_items"];
    put?: never;
    /** Poll Items */
    post: operations["api_views_external_feeds_routes_poll_items"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/automations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Automations */
    get: operations["api_views_automations_routes_list_automations"];
    put?: never;
    /** Create Automation */
    post: operations["api_views_automations_routes_create_automation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/automations/{id}/subscribers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Automation Subscribers */
    get: operations["api_views_automations_routes_retrieve_automation_subscribers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/automations/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Automation */
    get: operations["api_views_automations_routes_retrieve_automation"];
    put?: never;
    post?: never;
    /** Delete Automation */
    delete: operations["api_views_automations_routes_delete_automation"];
    options?: never;
    head?: never;
    /** Update Automation */
    patch: operations["api_views_automations_routes_update_automation"];
    trace?: never;
  };
  "/automations/{id}/invoke": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Invoke Automation */
    post: operations["api_views_automations_routes_invoke_automation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/automations/{id}/analytics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Automation Analytics */
    get: operations["api_views_automations_routes_retrieve_automation_analytics"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Users */
    get: operations["api_views_users_list_users"];
    put?: never;
    /** Create User */
    post: operations["api_views_users_create_user"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete User */
    delete: operations["api_views_users_delete_user"];
    options?: never;
    head?: never;
    /** Update User */
    patch: operations["api_views_users_update_user"];
    trace?: never;
  };
  "/prices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Prices */
    get: operations["api_views_prices_list_prices"];
    put?: never;
    /** Create Price */
    post: operations["api_views_prices_create_price"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/coupons": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Coupons */
    get: operations["api_views_coupons_list_coupons"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/surveys": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Surveys */
    get: operations["api_views_surveys_routes_list_surveys"];
    put?: never;
    /** Create Survey */
    post: operations["api_views_surveys_routes_create_survey"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/surveys/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Survey */
    get: operations["api_views_surveys_routes_retrieve_survey"];
    put?: never;
    post?: never;
    /** Delete Survey */
    delete: operations["api_views_surveys_routes_delete_survey"];
    options?: never;
    head?: never;
    /** Update Survey */
    patch: operations["api_views_surveys_routes_update_survey"];
    trace?: never;
  };
  "/api_requests/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Api Request */
    get: operations["api_views_api_requests_retrieve_api_request"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api_requests": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Api Requests */
    get: operations["api_views_api_requests_list_api_requests"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/advertising_units": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Advertising Units */
    get: operations["api_views_advertising_units_list_advertising_units"];
    put?: never;
    /** Create Advertising Unit */
    post: operations["api_views_advertising_units_create_advertising_unit"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/advertising_units/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete Advertising Unit */
    delete: operations["api_views_advertising_units_delete_advertising_unit"];
    options?: never;
    head?: never;
    /** Update Advertising Unit */
    patch: operations["api_views_advertising_units_update_advertising_unit"];
    trace?: never;
  };
  "/webhooks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Webhooks */
    get: operations["api_views_webhooks_list_webhooks"];
    put?: never;
    /** Create Webhook */
    post: operations["api_views_webhooks_create_webhook"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webhooks/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Webhook */
    get: operations["api_views_webhooks_retrieve_webhook"];
    put?: never;
    post?: never;
    /** Delete Webhook */
    delete: operations["api_views_webhooks_delete_webhook"];
    options?: never;
    head?: never;
    /** Update Webhook */
    patch: operations["api_views_webhooks_update_webhook"];
    trace?: never;
  };
  "/webhooks/{id}/test": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Test Webhook */
    post: operations["api_views_webhooks_test_webhook"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Comments */
    get: operations["api_views_comments_list_comments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/survey_responses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve Survey Responses */
    get: operations["api_views_survey_responses_retrieve_survey_responses"];
    put?: never;
    /** Create Survey Response */
    post: operations["api_views_survey_responses_create_survey_response"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Events */
    get: operations["api_views_events_list_events"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/events/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Event */
    get: operations["api_views_events_get_event"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Collection
     * @description A group of data that can be exported in an export.
     * @enum {string}
     */
    ExportCollection:
      | "subscribers"
      | "emails"
      | "events"
      | "referrals"
      | "surveys"
      | "comments"
      | "requests"
      | "mentions";
    /**
     * Status
     * @description Represents the status of an export.
     *
     *     No action is required to move from one state or another; Buttondown
     *     internally handles the transitions, and exposing the status is for
     *     observability purposes only.
     * @enum {string}
     */
    ExportStatus: "error" | "in_progress" | "not_started" | "ready";
    /**
     * Export
     * @description Some software applications may want programmatic access to their newsletter exports.
     *     This assists with a few niche use cases, such as regular backups or data ingestion
     *     (into a data warehouse), or post-publishing processes that hinge on email events.
     *
     *     In general, you probably won't _need_ to use this endpoint unless you
     *      _absolutely_ need to use this endpoint.
     */
    Export: {
      collections: components["schemas"]["ExportCollection"][];
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      /** Url */
      url?: string;
      /**
       * Completion Date
       * Format: date-time
       */
      completion_date?: string;
      status: components["schemas"]["ExportStatus"];
    };
    /** ErrorMessage */
    ErrorMessage: {
      /** Code */
      code?: unknown;
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /**
     * CreateExportErrorCode
     * @description An enumeration.
     * @enum {string}
     */
    CreateExportErrorCode: "collection_empty_invalid";
    /** ErrorMessage[CreateExportErrorCode] */
    ErrorMessage_CreateExportErrorCode_: {
      code: components["schemas"]["CreateExportErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** ExportInput */
    ExportInput: {
      collections: components["schemas"]["ExportCollection"][];
    };
    /** Page[Export] */
    ExportPage: {
      /** Results */
      results: components["schemas"]["Export"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * Tag
     * @description Tags are a way to organize your subscribers. You can create, update, and
     *     delete tags via the API. You can also list all tags for a given newsletter.
     *
     *     Tags don't have any strict functionality on their own, but you can send emails
     *     to subscribers with a given tag (or to all subscribers _without_ a given tag.)
     */
    Tag: {
      /** Name */
      name: string;
      /** Color */
      color: string;
      /** Description */
      description?: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Secondary Id */
      secondary_id: number;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
    };
    /** TagInput */
    TagInput: {
      /** Name */
      name: string;
      /** Color */
      color: string;
      /** Description */
      description?: string;
    };
    /** Page[Tag] */
    TagPage: {
      /** Results */
      results: components["schemas"]["Tag"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * UpdateTagErrorCode
     * @description A potential error code that can be returned when updating a tag.
     * @enum {string}
     */
    UpdateTagErrorCode: "name_already_exists" | "name_too_long";
    /** ErrorMessage[UpdateTagErrorCode] */
    ErrorMessage_UpdateTagErrorCode_: {
      code: components["schemas"]["UpdateTagErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** TagUpdateInput */
    TagUpdateInput: {
      /** Name */
      name?: string;
      /** Color */
      color?: string;
      /** Description */
      description?: string;
      /** Secondary Id */
      secondary_id?: number;
    };
    /** TagAnalytics */
    TagAnalytics: {
      /** Count */
      count: number;
      /** Click Rate */
      click_rate: number;
      /** Open Rate */
      open_rate: number;
      /** Retention */
      retention: number;
    };
    /** Empty */
    Empty: Record<string, never>;
    /**
     * Image
     * @description Images are, well, images! Buttondown allows you to upload images to its secure
     *     S3 bucket and do with them what you will. This is sort of an odd duck of an
     *     API, to be sure, but if you want to be able to do things like draft
     *     and send emails completely on your iPad you need a surefire way of creating images.
     */
    Image: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /** Image */
      image: string;
    };
    /**
     * Source
     * @description Represents the original provenance of an email. This value is not exposed
     *     to subscribers, but does determine some behavior of the email (e.g. whether
     *     or not analytics can be calculated.)
     * @enum {string}
     */
    EmailSource: "api" | "import" | "app" | "external_feed";
    /**
     * Type
     * @description Represents the audience of an email, and to whom it is visible both in the initial
     *     email and in online archives.
     * @enum {string}
     */
    EmailType:
      | "public"
      | "private"
      | "premium"
      | "free"
      | "churned"
      | "archival"
      | "hidden";
    /**
     * Status
     * @description Represents the state of an email.
     *
     *     No action is required to move from one state or another; Buttondown
     *     internally handles the transitions, and exposing the status is for
     *     observability purposes only.
     * @enum {string}
     */
    EmailStatus:
      | "draft"
      | "managed_by_rss"
      | "about_to_send"
      | "scheduled"
      | "in_flight"
      | "paused"
      | "deleted"
      | "errored"
      | "sent"
      | "imported";
    /**
     * Operator
     * @description An enumeration.
     * @enum {string}
     */
    Operator:
      | "equals"
      | "not_equals"
      | "contains"
      | "not_contains"
      | "is_empty"
      | "is_not_empty"
      | "greater_than"
      | "less_than";
    /** Filter */
    Filter: {
      /** Field */
      field: string;
      operator: components["schemas"]["Operator"];
      /** Value */
      value: string;
    };
    /** FilterGroup */
    FilterGroup: {
      /** Filters */
      filters: components["schemas"]["Filter"][];
      /** Groups */
      groups: components["schemas"]["FilterGroup"][];
      /**
       * Predicate
       * @description The logical operator to use when combining filters (either 'and' or 'or').
       * @enum {string}
       */
      predicate: "and" | "or";
    };
    /** Analytics */
    Analytics: {
      /**
       * Recipients
       * @default 0
       */
      recipients: number;
      /**
       * Deliveries
       * @default 0
       */
      deliveries: number;
      /**
       * Opens
       * @default 0
       */
      opens: number;
      /**
       * Clicks
       * @default 0
       */
      clicks: number;
      /**
       * Temporary Failures
       * @default 0
       */
      temporary_failures: number;
      /**
       * Permanent Failures
       * @default 0
       */
      permanent_failures: number;
      /**
       * Unsubscriptions
       * @default 0
       */
      unsubscriptions: number;
      /**
       * Complaints
       * @default 0
       */
      complaints: number;
      /**
       * Survey Responses
       * @default 0
       */
      survey_responses: number;
      /**
       * Webmentions
       * @default 0
       */
      webmentions: number;
      /**
       * Page Views  Lifetime
       * @default 0
       */
      page_views__lifetime: number;
      /**
       * Page Views  30
       * @default 0
       */
      page_views__30: number;
      /**
       * Page Views  7
       * @default 0
       */
      page_views__7: number;
      /**
       * Subscriptions
       * @default 0
       */
      subscriptions: number;
      /**
       * Paid Subscriptions
       * @default 0
       */
      paid_subscriptions: number;
      /**
       * Replies
       * @default 0
       */
      replies: number;
      /**
       * Comments
       * @default 0
       */
      comments: number;
    };
    /**
     * EmailTemplate
     * @description Represents the template of an email.
     *
     *     Each template has a different layout/style.
     * @enum {string}
     */
    NewsletterEmailTemplate:
      | "classic"
      | "modern"
      | "modern-german"
      | "airy"
      | "legal"
      | "plaintext"
      | "naked";
    /**
     * Email
     * @description Emails are what you're for here on Buttondown at the end of the day, right?
     *     Creating an email via the API is just like creating one in the interface;
     *     it will instantly trigger sending actual emails,
     *     based on the tags and email type you provide.
     *
     *     Relevant changes to the schema:
     *
     *     - [2024-08-15](https://docs.buttondown.com/api-changelog-2024-08-15): unshipped the `included_tags` and `excluded_tags` fields.
     */
    Email: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time the object was first created.
       */
      creation_date: string;
      /**
       * Modification Date
       * Format: date-time
       * @description The date and time the object was last modified.
       */
      modification_date: string;
      /**
       * Publish Date
       * Format: date-time
       */
      publish_date?: string;
      /** Attachments */
      attachments?: string[];
      /** Subject */
      subject: string;
      /** Canonical Url */
      canonical_url: string;
      /** Image */
      image: string;
      /** Description */
      description: string;
      source: components["schemas"]["EmailSource"];
      /**
       * Body
       * @description Can be either HTML or markdown.
       */
      body: string;
      /** Secondary Id */
      secondary_id?: number;
      email_type: components["schemas"]["EmailType"];
      /** Slug */
      slug?: string;
      status: components["schemas"]["EmailStatus"];
      /**
       * Metadata
       * @description A structured key-value blob that you can use to store arbitrary data on the object.
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
      /** Should Send Teaser */
      should_send_teaser: boolean;
      /** Is Comments Disabled */
      is_comments_disabled: boolean;
      /** Custom Teaser */
      custom_teaser: string;
      /** Absolute Url */
      absolute_url: string;
      filters: components["schemas"]["FilterGroup"];
      analytics?: components["schemas"]["Analytics"];
      template?: components["schemas"]["NewsletterEmailTemplate"];
    };
    /**
     * EmailCreationErrorCode
     * @description Represents the type of error that occurred when creating an email.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    EmailCreationErrorCode:
      | "subject_invalid"
      | "email_duplicate"
      | "email_invalid"
      | "body_invalid"
      | "publish_date_invalid"
      | "publish_date_missing"
      | "status_invalid"
      | "slug_invalid"
      | "canonical_url_invalid"
      | "tag_invalid";
    /** ErrorMessage[EmailCreationErrorCode] */
    ErrorMessage_EmailCreationErrorCode_: {
      code: components["schemas"]["EmailCreationErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** EmailInput */
    EmailInput: {
      /**
       * Attachments
       * @default []
       */
      attachments: string[];
      /**
       * Publish Date
       * Format: date-time
       */
      publish_date?: string;
      /** Subject */
      subject: string;
      /** Slug */
      slug?: string;
      /**
       * Description
       * @default
       */
      description: string;
      /**
       * Canonical Url
       * @default
       */
      canonical_url: string;
      /**
       * Image
       * @default
       */
      image: string;
      /**
       * Body
       * @description Can be either HTML or markdown.
       * @default
       */
      body: string;
      /** @default public */
      email_type: components["schemas"]["EmailType"];
      /** @default about_to_send */
      status: components["schemas"]["EmailStatus"];
      /**
       * Metadata
       * @description A structured key-value blob that you can use to store arbitrary data on the object.
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
      /**
       * Should Send Teaser
       * @default false
       */
      should_send_teaser: boolean;
      /**
       * Is Comments Disabled
       * @default false
       */
      is_comments_disabled: boolean;
      /**
       * Custom Teaser
       * @default
       */
      custom_teaser: string;
      /** Secondary Id */
      secondary_id?: number;
      /**
       * Filters
       * @default {
       *       "filters": [],
       *       "groups": [],
       *       "predicate": "and"
       *     }
       */
      filters: components["schemas"]["FilterGroup"];
    };
    /** Page[Email] */
    EmailPage: {
      /** Results */
      results: components["schemas"]["Email"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * EmailListErrorCode
     * @description Represents the type of error that occurred when listing emails.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    EmailListErrorCode: "creation_date_invalid" | "publish_date_invalid";
    /** ErrorMessage[EmailListErrorCode] */
    ErrorMessage_EmailListErrorCode_: {
      code: components["schemas"]["EmailListErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** EmailUpdateInput */
    EmailUpdateInput: {
      /**
       * Attachments
       * @default []
       */
      attachments: string[];
      /**
       * Publish Date
       * Format: date-time
       */
      publish_date?: string;
      /** Subject */
      subject?: string;
      /** Description */
      description?: string;
      /** Canonical Url */
      canonical_url?: string;
      /**
       * Body
       * @description Can be either HTML or markdown.
       */
      body?: string;
      email_type?: components["schemas"]["EmailType"];
      status?: components["schemas"]["EmailStatus"];
      /**
       * Metadata
       * @description A structured key-value blob that you can use to store arbitrary data on the object.
       */
      metadata?: {
        [key: string]: string;
      };
      /**
       * Image
       * @default
       */
      image: string;
      /** Should Send Teaser */
      should_send_teaser?: boolean;
      /** Is Comments Disabled */
      is_comments_disabled?: boolean;
      /** Custom Teaser */
      custom_teaser?: string;
      /** Slug */
      slug?: string;
      /** Secondary Id */
      secondary_id?: number;
      filters?: components["schemas"]["FilterGroup"];
      template?: components["schemas"]["NewsletterEmailTemplate"];
    };
    /** History */
    History: {
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /** Value */
      value: string;
    };
    /** Page[History] */
    HistoryPage: {
      /** Results */
      results: components["schemas"]["History"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** SendDraftInput */
    SendDraftInput: {
      /**
       * Subscribers
       * @description A list of subscriber ids to which to send the email.
       */
      subscribers?: string[];
      /**
       * Recipients
       * @description A list of email addresses to send the email to.
       */
      recipients?: string[];
    };
    /**
     * Type
     * @description Represents the state of a subscriber and what emails they
     *     should or should not be receiving. This type is meant to be fully expressive
     *     so as to consolidate the logic of determining what emails a subscriber should
     *     receive into a single place.
     * @enum {string}
     */
    SubscriberType:
      | "regular"
      | "premium"
      | "churning"
      | "past_due"
      | "gifted"
      | "unpaid"
      | "churned"
      | "unactivated"
      | "unsubscribed"
      | "malformed"
      | "complained"
      | "undeliverable"
      | "spammy"
      | "removed"
      | "trialed"
      | "disabled"
      | "paused"
      | "disposable";
    /**
     * Source
     * @description Represents the original provenance of a subscriber. This value is not exposed
     *     to subscribers; it's only used for internal tracking purposes and governs some
     *     of the behavior of the subscriber (i.e. whether or not to require double
     *     opt-in.)
     * @enum {string}
     */
    SubscriberSource: "api" | "import" | "organic" | "user" | "admin";
    /** StripeCoupon */
    StripeCoupon: {
      /** Coupon Id */
      coupon_id: string;
      /** Percent Off */
      percent_off?: string;
      /** Amount Off */
      amount_off?: number;
      /** Name */
      name?: string;
    };
    /** Transition */
    Transition: {
      /**
       * Date
       * Format: date-time
       */
      date: string;
      type: components["schemas"]["SubscriberType"];
    };
    /**
     * Subscriber
     * @description Subscribers are the main way you collect email addresses and
     *     recipients on Buttondown. They're what you see on your
     *     [subscribers page](https://buttondown.com/subscribers).
     *
     *     Relevant changes to the schema:
     *
     *     - [2024-08-01](https://docs.buttondown.com/api-changelog-2024-08-01): renamed `subscriber_type` and `email` to `type` and `email_address` respectively.
     *     - [2024-07-13](https://docs.buttondown.com/api-changelog-2024-08-01): removed `external_url` in favor of `absolute_url`.
     */
    Subscriber: {
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      /**
       * Email Address
       * @description The email address of the subscriber.
       * @example hello@example.com
       */
      email_address: string;
      /**
       * Notes
       * @description Any notes you want to attach to the subscriber. These are not publicly visible.
       * @default
       */
      notes: string;
      /**
       * Metadata
       * @description A structured key-value blob that you can use to store arbitrary data on the object.
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
      /** Tags */
      tags: string[];
      /**
       * Referrer Url
       * @default
       */
      referrer_url: string;
      /** Secondary Id */
      secondary_id: number;
      type: components["schemas"]["SubscriberType"];
      source: components["schemas"]["SubscriberSource"];
      /** Utm Campaign */
      utm_campaign: string;
      /** Utm Medium */
      utm_medium: string;
      /** Utm Source */
      utm_source: string;
      /** Referral Code */
      referral_code: string;
      /** Avatar Url */
      avatar_url?: string;
      stripe_coupon?: components["schemas"]["StripeCoupon"];
      /**
       * Unsubscription Date
       * Format: date-time
       */
      unsubscription_date?: string;
      /**
       * Churn Date
       * Format: date-time
       */
      churn_date?: string;
      /** Unsubscription Reason */
      unsubscription_reason?: string;
      /**
       * Transitions
       * @default []
       */
      transitions: components["schemas"]["Transition"][];
      /** Ip Address */
      ip_address?: string;
      /**
       * Last Open Date
       * Format: date-time
       */
      last_open_date?: string;
      /**
       * Last Click Date
       * Format: date-time
       */
      last_click_date?: string;
      /** Stripe Customer Id */
      stripe_customer_id?: string;
      /** Stripe Customer */
      stripe_customer?: Record<string, never>;
      /**
       * Subscriber Import Id
       * Format: uuid
       */
      subscriber_import_id?: string;
    };
    /**
     * CreateSubscriberErrorCode
     * @description Represents the type of error that occurred when creating a subscriber.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    CreateSubscriberErrorCode:
      | "email_already_exists"
      | "email_invalid"
      | "tag_invalid"
      | "metadata_invalid";
    /** ErrorMessage[CreateSubscriberErrorCode] */
    ErrorMessage_CreateSubscriberErrorCode_: {
      code: components["schemas"]["CreateSubscriberErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** SubscriberInput */
    SubscriberInput: {
      /** Email Address */
      email_address: string;
      /**
       * Notes
       * @default
       */
      notes: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
      /**
       * Tags
       * @default []
       */
      tags: string[];
      /**
       * Referrer Url
       * @default
       */
      referrer_url: string;
      /**
       * Utm Campaign
       * @default
       */
      utm_campaign: string;
      /**
       * Utm Medium
       * @default
       */
      utm_medium: string;
      /**
       * Utm Source
       * @default
       */
      utm_source: string;
      /**
       * Referring Subscriber Id
       * Format: uuid
       */
      referring_subscriber_id?: string;
      type?: components["schemas"]["SubscriberType"];
    };
    /** Page[Subscriber] */
    SubscriberPage: {
      /** Results */
      results: components["schemas"]["Subscriber"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * ListSubscribersErrorCode
     * @description Represents the type of error that occurred when listing subscribers.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    ListSubscribersErrorCode: "invalid_tag" | "date_invalid";
    /** ErrorMessage[ListSubscribersErrorCode] */
    ErrorMessage_ListSubscribersErrorCode_: {
      code: components["schemas"]["ListSubscribersErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /**
     * UpdateSubscriberErrorCode
     * @description Represents the type of error that occurred when updating a subscriber.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    UpdateSubscriberErrorCode:
      | "email_already_exists"
      | "email_invalid"
      | "email_has_been_changed_too_many_times"
      | "subscriber_type_invalid"
      | "tag_invalid";
    /** ErrorMessage[UpdateSubscriberErrorCode] */
    ErrorMessage_UpdateSubscriberErrorCode_: {
      code: components["schemas"]["UpdateSubscriberErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** SubscriberUpdateInput */
    SubscriberUpdateInput: {
      /** Email Address */
      email_address?: string;
      /** Notes */
      notes?: string;
      /** Metadata */
      metadata?: {
        [key: string]: string;
      };
      /** Tags */
      tags?: string[];
      /**
       * Referrer Url
       * @default
       */
      referrer_url: string;
      type?: components["schemas"]["SubscriberType"];
      /** Unsubscription Reason */
      unsubscription_reason?: string;
    };
    /** Client */
    Client: {
      /** Region */
      region: string;
      /** Country */
      country: string;
      /** Client Os */
      client_os: string;
      /** Client Type */
      client_type: string;
      /** Client Name */
      client_name: string;
      /** Occurrences */
      occurrences: number;
    };
    /** Page[Client] */
    ClientPage: {
      /** Results */
      results: components["schemas"]["Client"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * Status
     * @description An enumeration.
     * @enum {string}
     */
    AutomationAttemptStatus:
      | "unprocessed"
      | "processed"
      | "failed"
      | "pending"
      | "skipped";
    /** AutomationForSubscriber */
    AutomationForSubscriber: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      status: components["schemas"]["AutomationAttemptStatus"];
      /**
       * Automation Id
       * Format: uuid
       */
      automation_id: string;
      /**
       * Execution Date
       * Format: date-time
       */
      execution_date: string;
      /** Actions */
      actions: Record<string, never>[];
    };
    /** Page[AutomationForSubscriber] */
    AutomationForSubscriberPage: {
      /** Results */
      results: components["schemas"]["AutomationForSubscriber"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** StripeSubscription */
    StripeSubscription: {
      /** Subscription Id */
      subscription_id: string;
      /** Url */
      url: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Ending Date
       * Format: date-time
       */
      ending_date?: string;
      /** Amount */
      amount: number;
      /** Currency */
      currency: string;
      /** Cadence */
      cadence: string;
      /** Status */
      status: string;
    };
    /** Page[StripeSubscription] */
    StripeSubscriptionPage: {
      /** Results */
      results: components["schemas"]["StripeSubscription"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * Newsletter
     * @description You will likely not need to interact with your newsletter settings
     *     programmatically, but if you do, this is the endpoint for you. You can
     *     create, update, and list newsletters via the API; this is ideal for
     *     integrating with Buttondown as a headless email or newsletter provider
     *     (e.g. for a SaaS product.)
     */
    Newsletter: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Username */
      username: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Api Key
       * Format: uuid
       */
      api_key: string;
      /**
       * Tint Color
       * @default #0069FF
       */
      tint_color: string;
      /**
       * From Name
       * @default
       */
      from_name: string;
      /**
       * Header
       * @default
       */
      header: string;
      /**
       * Footer
       * @default
       */
      footer: string;
      /**
       * Domain
       * @default
       */
      domain: string;
      /**
       * Email Domain
       * @default
       */
      email_domain: string;
      /**
       * Enabled Features
       * @default []
       */
      enabled_features: string[];
      /** Custom Email Template */
      custom_email_template?: string;
    };
    /** Page[Newsletter] */
    NewsletterPage: {
      /** Results */
      results: components["schemas"]["Newsletter"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * CreateNewsletterErrorCode
     * @description Represents the type of error that occurred when creating a newsletter.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    CreateNewsletterErrorCode: "username_already_exists" | "username_invalid";
    /** ErrorMessage[CreateNewsletterErrorCode] */
    ErrorMessage_CreateNewsletterErrorCode_: {
      code: components["schemas"]["CreateNewsletterErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** NewsletterInput */
    NewsletterInput: {
      /** Username */
      username: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Tint Color
       * @default #0069FF
       */
      tint_color: string;
      /**
       * From Name
       * @default
       */
      from_name: string;
      /**
       * Header
       * @default
       */
      header: string;
      /**
       * Footer
       * @default
       */
      footer: string;
      /**
       * Domain
       * @default
       */
      domain: string;
      /**
       * Email Domain
       * @default
       */
      email_domain: string;
      /**
       * Enabled Features
       * @default []
       */
      enabled_features: string[];
      /** Custom Email Template */
      custom_email_template?: string;
    };
    /** NewsletterUpdateInput */
    NewsletterUpdateInput: {
      /** Username */
      username?: string;
      /** Name */
      name?: string;
      /** Description */
      description?: string;
      /** Tint Color */
      tint_color?: string;
      /** From Name */
      from_name?: string;
      /** Header */
      header?: string;
      /** Footer */
      footer?: string;
      /** Domain */
      domain?: string;
      /** Email Domain */
      email_domain?: string;
      /** Enabled Features */
      enabled_features?: string[];
      /** Custom Email Template */
      custom_email_template?: string;
    };
    /**
     * Type
     * @description Represents the action being performed on a bulk of objects.
     *
     *     (Not to be coy, but these names should be self-explanatory.)
     * @enum {string}
     */
    BulkActionType:
      | "apply_tags"
      | "apply_metadata"
      | "ban_subscribers"
      | "delete_subscribers"
      | "gift_subscribers"
      | "reactivate_subscribers"
      | "mark_subscribers_as_not_spammy"
      | "resubscribe_subscribers"
      | "send_emails"
      | "unsubscribe_subscribers"
      | "send_reminders"
      | "delete_emails"
      | "update_email_types"
      | "delete_tags"
      | "delete_surveys"
      | "replay_events"
      | "delete_comments"
      | "update_survey_statuses";
    /**
     * Status
     * @description Represents the status of a bulk action.
     *
     *     No action is required to move from one state or another; Buttondown
     *     internally handles the transitions, and exposing the status is for
     *     observability purposes only.
     * @enum {string}
     */
    BulkActionStatus: "not_started" | "in_progress" | "processed" | "failed";
    /**
     * BulkAction
     * @description A bulk action represents, well, a bulk action. It is used to perform
     *     actions on a large number of objects at once. For example, you can
     *     use it to delete a large number of emails, or to unsubscribe a large
     *     number of subscribers. The actions within a bulk action are processed
     *     serially by Buttondown; this should be considered an ergonomic way to
     *     batch API calls across the network rather than a net-new piece of functionality
     *     in of itself.
     */
    BulkAction: {
      type: components["schemas"]["BulkActionType"];
      /** Metadata */
      metadata: {
        [key: string]: string | string[] | Record<string, never>;
      };
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      status: components["schemas"]["BulkActionStatus"];
      /**
       * Completion Date
       * Format: date-time
       * @description The date and time at which the bulk action was completed.
       */
      completion_date?: string;
    };
    /** BulkActionInput */
    BulkActionInput: {
      type: components["schemas"]["BulkActionType"];
      /** Metadata */
      metadata: {
        [key: string]: string | string[] | Record<string, never>;
      };
    };
    /**
     * Status
     * @description Represents the status of the automation, and whether or not it is active. Inactive automations will not be processed.
     * @enum {string}
     */
    ExternalFeedAutomationStatus: "active" | "inactive";
    /**
     * Behavior
     * @description An enumeration.
     * @enum {string}
     */
    ExternalFeedAutomationBehavior: "draft" | "emails";
    /**
     * Cadence
     * @description An enumeration.
     * @enum {string}
     */
    ExternalFeedAutomationCadence: "every" | "daily" | "weekly" | "monthly";
    /**
     * ExternalFeed
     * @description An automation is a one-to-one mapping between an external RSS feed and an action
     *     to be performed when new items are detected in that feed. Right now, Buttondown offers
     *     two actions:
     *
     *     - Send an email
     *     - Create an email but save it as a draft to be sent out manually
     *
     *     The automation is configured with a cadence, which is the frequency at which the
     *     automation will be run. The cadence can be one of the following:
     *
     *     - Run the automation every time a new item is detected in the feed
     *     - Run the automation once per week
     *     - Run the automation once per month
     */
    ExternalFeed: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Last Checked Date
       * Format: date-time
       */
      last_checked_date?: string;
      status: components["schemas"]["ExternalFeedAutomationStatus"];
      behavior: components["schemas"]["ExternalFeedAutomationBehavior"];
      cadence: components["schemas"]["ExternalFeedAutomationCadence"];
      /** Cadence Metadata */
      cadence_metadata: {
        [key: string]: string;
      };
      /** Included Tags */
      included_tags?: string[];
      /** Url */
      url: string;
      /** Subject */
      subject: string;
      /** Body */
      body: string;
      /** Label */
      label: string;
    };
    /** ExternalFeedInput */
    ExternalFeedInput: {
      /** Url */
      url: string;
      behavior: components["schemas"]["ExternalFeedAutomationBehavior"];
      cadence: components["schemas"]["ExternalFeedAutomationCadence"];
      /** Cadence Metadata */
      cadence_metadata: {
        [key: string]: string;
      };
      /** Included Tags */
      included_tags: string[];
      /** Subject */
      subject: string;
      /** Body */
      body: string;
      /**
       * Label
       * @default
       */
      label: string;
    };
    /** Page[ExternalFeed] */
    ExternalFeedPage: {
      /** Results */
      results: components["schemas"]["ExternalFeed"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** ExternalFeedUpdateInput */
    ExternalFeedUpdateInput: {
      behavior?: components["schemas"]["ExternalFeedAutomationBehavior"];
      cadence?: components["schemas"]["ExternalFeedAutomationCadence"];
      /** Cadence Metadata */
      cadence_metadata?: {
        [key: string]: string;
      };
      /** Included Tags */
      included_tags?: string[];
      /** Subject */
      subject?: string;
      /** Body */
      body?: string;
      /** Label */
      label?: string;
      status?: components["schemas"]["ExternalFeedAutomationStatus"];
    };
    /**
     * Status
     * @description The status of a given item (meaning a distinct URL) within an RSS feed.
     * @enum {string}
     */
    ExternalFeedItemStatus:
      | "unprocessed"
      | "irrelevant"
      | "errored"
      | "skipped"
      | "queued"
      | "processed";
    /**
     * ExternalFeedItem
     * @description An external feed item is a single item in an external RSS feed. It is created
     *     automatically by Buttondown when a new item is detected in an external feed. External feed
     *     items are immutable and cannot be modified or deleted.
     */
    ExternalFeedItem: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      status: components["schemas"]["ExternalFeedItemStatus"];
      /** Url */
      url: string;
      /**
       * Publish Date
       * Format: date-time
       */
      publish_date: string;
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Content */
      content: string;
      /** Author */
      author: string;
      /**
       * Email Id
       * Format: uuid
       */
      email_id?: string;
      email?: components["schemas"]["Email"];
    };
    /** Page[ExternalFeedItem] */
    ExternalFeedItemPage: {
      /** Results */
      results: components["schemas"]["ExternalFeedItem"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * Status
     * @description An enumeration.
     * @enum {string}
     */
    AutomationStatus: "active" | "inactive";
    /**
     * Type
     * @description Various types of events that are recorded by Buttondown, both in terms of exogenous systems
     *     like Stripe and Memberful, and endogenous ones like email opens and clicks. (In general, if anything
     *     important ever happens that could be relevant to your newsletter, we have an event type for it!)
     *
     *     These event types power lots of things within Buttondown. They're used to trigger automations, webhooks,
     *     and analytics.
     *
     *     (Note that Buttondown also has a different thing we call "events"; those are `EmailEvents` and are used
     *     for tracking aggregate details about an email. Alas, we shouldn't have used the term "event" for two different
     *     things, but it's too late to go back now!)
     * @enum {string}
     */
    ExternalEventType:
      | "subscriber.created"
      | "subscriber.unsubscribed"
      | "subscriber.changed_email"
      | "subscriber.confirmed"
      | "subscriber.trial_started"
      | "subscriber.trial_ended"
      | "subscriber.type.changed"
      | "subscriber.tags.changed"
      | "subscriber.clicked"
      | "subscriber.opened"
      | "subscriber.paid"
      | "subscriber.churned"
      | "subscriber.updated"
      | "subscriber.deleted"
      | "subscriber.viewed_checkout_page"
      | "subscriber.replied"
      | "subscriber.paused"
      | "subscriber.resumed"
      | "subscriber.responded_to_survey"
      | "subscriber.referred"
      | "subscriber.referred.paid"
      | "subscriber.commented"
      | "email.created"
      | "email.sent"
      | "email.updated"
      | "email.deleted"
      | "email.status.changed"
      | "scheduled_email.converted"
      | "mention.created"
      | "advertising_slot.purchased"
      | "automation.invoked"
      | "stripe.checkout.session.completed"
      | "stripe.subscription.activated"
      | "stripe.subscription.deactivated"
      | "stripe.customer.updated"
      | "memberful.subscription.created"
      | "memberful.subscription.deleted"
      | "memberful.member.updated";
    /** Delay */
    Delay: {
      /** Value */
      value: string;
      /**
       * Unit
       * @enum {string}
       */
      unit: "minutes" | "hours" | "days" | "weeks";
      /**
       * Time Of Day
       * @enum {string}
       */
      time_of_day?: "morning" | "evening" | "";
    };
    /** Timing */
    Timing: {
      /**
       * Time
       * @enum {string}
       */
      time: "immediate" | "delay";
      delay?: components["schemas"]["Delay"];
    };
    /**
     * ActionType
     * @description The action that is triggered when the automation is successfully run.
     * @enum {string}
     */
    AutomationActionType:
      | "add_tags"
      | "remove_tags"
      | "send_email"
      | "add_metadata"
      | "change_email_address"
      | "gift_premium_subscription"
      | "ungift_premium_subscription"
      | "send_discord_invitation"
      | "send_github_invitation"
      | "create_subscriber"
      | "unsubscribe_subscriber"
      | "shopify_unsubscribe"
      | "send_notification"
      | "forward_reply"
      | "create_linkedin_post"
      | "create_twitter_post"
      | "create_bluesky_post";
    /** Action */
    Action: {
      type: components["schemas"]["AutomationActionType"];
      /** Metadata */
      metadata: Record<string, never>;
    };
    /** Automation */
    Automation: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /** Name */
      name: string;
      status: components["schemas"]["AutomationStatus"];
      trigger: components["schemas"]["ExternalEventType"];
      timing: components["schemas"]["Timing"];
      /** Actions */
      actions: components["schemas"]["Action"][];
      /** Filters */
      filters: components["schemas"]["Filter"][];
      /** Metadata */
      metadata: {
        [key: string]: string;
      };
    };
    /** Page[Automation] */
    AutomationPage: {
      /** Results */
      results: components["schemas"]["Automation"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * AutomationCreationErrorCode
     * @description Represents the type of error that occurred when creating an automation.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    AutomationCreationErrorCode:
      | "delay_invalid"
      | "filter_invalid__tag"
      | "filter_invalid"
      | "action_invalid";
    /** ErrorMessage[AutomationCreationErrorCode] */
    ErrorMessage_AutomationCreationErrorCode_: {
      code: components["schemas"]["AutomationCreationErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** AutomationInput */
    AutomationInput: {
      /** Name */
      name: string;
      trigger: components["schemas"]["ExternalEventType"];
      timing: components["schemas"]["Timing"];
      /** Actions */
      actions: Record<string, never>[];
      /** Filters */
      filters: Record<string, never>[];
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
      /** @default inactive */
      status: components["schemas"]["AutomationStatus"];
    };
    /** SubscriberForAutomation */
    SubscriberForAutomation: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      status: components["schemas"]["AutomationAttemptStatus"];
      /** Subscriber Id */
      subscriber_id?: string;
      subscriber?: components["schemas"]["Subscriber"];
    };
    /** Page[SubscriberForAutomation] */
    SubscriberForAutomationPage: {
      /** Results */
      results: components["schemas"]["SubscriberForAutomation"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** AutomationUpdateInput */
    AutomationUpdateInput: {
      /** Name */
      name?: string;
      status?: components["schemas"]["AutomationStatus"];
      trigger?: components["schemas"]["ExternalEventType"];
      timing?: components["schemas"]["Timing"];
      /** Actions */
      actions?: Record<string, never>[];
      /** Filters */
      filters?: Record<string, never>[];
      /** Metadata */
      metadata?: {
        [key: string]: string;
      };
    };
    /**
     * AccessLevel
     * @description An enumeration.
     * @enum {string}
     */
    AccessLevel: "none" | "read" | "write";
    /** Permissions */
    Permissions: {
      /** @default none */
      subscriber: components["schemas"]["AccessLevel"];
      /** @default none */
      email: components["schemas"]["AccessLevel"];
      /** @default none */
      styling: components["schemas"]["AccessLevel"];
      /** @default none */
      administrivia: components["schemas"]["AccessLevel"];
      /** @default none */
      automations: components["schemas"]["AccessLevel"];
      /** @default none */
      surveys: components["schemas"]["AccessLevel"];
    };
    /**
     * Status
     * @description An enumeration.
     * @enum {string}
     */
    InvitationStatus: "pending" | "accepted" | "declined" | "revoked";
    /** User */
    User: {
      permissions: components["schemas"]["Permissions"];
      /** Email Address */
      email_address: string;
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      status: components["schemas"]["InvitationStatus"];
    };
    /**
     * Failure
     * @description An enumeration.
     * @enum {string}
     */
    Failure: "email_already_exists";
    /** ErrorMessage[Failure] */
    ErrorMessage_Failure_: {
      code: components["schemas"]["Failure"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** UserInput */
    UserInput: {
      permissions: components["schemas"]["Permissions"];
      /** Email Address */
      email_address: string;
    };
    /** Page[User] */
    UserPage: {
      /** Results */
      results: components["schemas"]["User"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** UserUpdateInput */
    UserUpdateInput: {
      /** Permissions */
      permissions: {
        [key: string]: string;
      };
    };
    /**
     * Cadence
     * @description An enumeration.
     * @enum {string}
     */
    Cadence: "year" | "month" | "one-time";
    /** Product */
    Product: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Product Id */
      product_id: string;
      /** Name */
      name: string;
      /** Creation Date */
      creation_date: string;
    };
    /** Price */
    Price: {
      /** Id */
      id: string;
      /** Amount */
      amount?: number;
      /**
       * Style
       * @enum {string}
       */
      style: "pay-what-you-want" | "fixed";
      /** Currency */
      currency: string;
      cadence: components["schemas"]["Cadence"];
      /** Product Id */
      product_id: string;
      product?: components["schemas"]["Product"];
    };
    /** Page[Price] */
    PricePage: {
      /** Results */
      results: components["schemas"]["Price"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * ListPricesErrorCode
     * @description Represents the type of error that occurred when listing a price.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    ListPricesErrorCode: "paid_subscriptions_uninitialized";
    /** ErrorMessage[ListPricesErrorCode] */
    ErrorMessage_ListPricesErrorCode_: {
      code: components["schemas"]["ListPricesErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /**
     * CreatePriceErrorCode
     * @description Represents the type of error that occurred when listing a price.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    CreatePriceErrorCode: "paid_subscriptions_uninitialized";
    /** ErrorMessage[CreatePriceErrorCode] */
    ErrorMessage_CreatePriceErrorCode_: {
      code: components["schemas"]["CreatePriceErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** PriceInput */
    PriceInput: {
      /**
       * Style
       * @enum {string}
       */
      style: "pay-what-you-want" | "fixed";
      /** Amount */
      amount?: number;
      /** Currency */
      currency: string;
      cadence: components["schemas"]["Cadence"];
    };
    /** Page[StripeCoupon] */
    StripeCouponPage: {
      /** Results */
      results: components["schemas"]["StripeCoupon"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * ResponseCadence
     * @description An enumeration.
     * @enum {string}
     */
    SurveyResponseCadence: "once" | "once_per_email";
    /**
     * Status
     * @description An enumeration.
     * @enum {string}
     */
    SurveyStatus: "active" | "inactive";
    /** Survey */
    Survey: {
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      /** Identifier */
      identifier: string;
      /** Question */
      question: string;
      /** Response Count */
      response_count: number;
      /** Answers */
      answers: string[];
      /** Notes */
      notes: string;
      response_cadence: components["schemas"]["SurveyResponseCadence"];
      status: components["schemas"]["SurveyStatus"];
      /** Is Freeform Response Enabled */
      is_freeform_response_enabled: boolean;
    };
    /**
     * CreateSurveyErrorCode
     * @description Represents the type of error that occurred when creating a survey.
     *
     *     Human-readable error messages are provided in the `detail` field of the response;
     *     these values are meant to be parseable by code or client logic.
     * @enum {string}
     */
    CreateSurveyErrorCode: "identifier_already_exists";
    /** ErrorMessage[CreateSurveyErrorCode] */
    ErrorMessage_CreateSurveyErrorCode_: {
      code: components["schemas"]["CreateSurveyErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** SurveyInput */
    SurveyInput: {
      /** Identifier */
      identifier: string;
      /** Question */
      question: string;
      /** Answers */
      answers: string[];
      /**
       * Notes
       * @default
       */
      notes: string;
      /**
       * Is Freeform Response Enabled
       * @default false
       */
      is_freeform_response_enabled: boolean;
      /** @default once */
      response_cadence: components["schemas"]["SurveyResponseCadence"];
    };
    /** Page[Survey] */
    SurveyPage: {
      /** Results */
      results: components["schemas"]["Survey"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * UpdateSurveyErrorCode
     * @description An enumeration.
     * @enum {string}
     */
    UpdateSurveyErrorCode: "answers_empty";
    /** ErrorMessage[UpdateSurveyErrorCode] */
    ErrorMessage_UpdateSurveyErrorCode_: {
      code: components["schemas"]["UpdateSurveyErrorCode"];
      /** Detail */
      detail: string;
      /**
       * Metadata
       * @default {}
       */
      metadata: {
        [key: string]: string;
      };
    };
    /** SurveyUpdateInput */
    SurveyUpdateInput: {
      /** Notes */
      notes?: string;
      /** Answers */
      answers?: string[];
      response_cadence?: components["schemas"]["SurveyResponseCadence"];
      status?: components["schemas"]["SurveyStatus"];
      /**
       * Is Freeform Response Enabled
       * @default false
       */
      is_freeform_response_enabled: boolean;
    };
    /**
     * Source
     * @description An enumeration.
     * @enum {string}
     */
    APIRequestSource: "api" | "app" | "carrd" | "zapier" | "cli";
    /**
     * APIRequestDetail
     * @description Represents a request to the API (api.buttondown.com).
     */
    APIRequestDetail: {
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      /** Status Code */
      status_code: number;
      /** Path */
      path: string;
      /** Method */
      method: string;
      source: components["schemas"]["APIRequestSource"];
      /**
       * Version
       * @enum {string}
       */
      version: "2024-07-01" | "2024-08-01" | "2024-08-15";
      /** Request Data */
      request_data: string;
      /** Response Data */
      response_data: string;
      /** Ip Address */
      ip_address: string;
    };
    /**
     * APIRequest
     * @description Represents a request to the API (api.buttondown.com).
     */
    APIRequest: {
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      /** Status Code */
      status_code: number;
      /** Path */
      path: string;
      /** Method */
      method: string;
      source: components["schemas"]["APIRequestSource"];
      /**
       * Version
       * @enum {string}
       */
      version: "2024-07-01" | "2024-08-01" | "2024-08-15";
    };
    /** Page[APIRequest] */
    APIRequestPage: {
      /** Results */
      results: components["schemas"]["APIRequest"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * Status
     * @description An enumeration.
     * @enum {string}
     */
    AdvertisingSKUStatus: "active" | "inactive";
    /**
     * Status
     * @description An enumeration.
     * @enum {string}
     */
    AdvertisingSlotStatus:
      | "open"
      | "sold"
      | "finalized"
      | "executed"
      | "expired";
    /** AdvertisingSlot */
    AdvertisingSlot: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Date
       * Format: date
       */
      date: string;
      status: components["schemas"]["AdvertisingSlotStatus"];
      /** Invoice Url */
      invoice_url?: string;
    };
    /** AdvertisingUnit */
    AdvertisingUnit: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      status: components["schemas"]["AdvertisingSKUStatus"];
      /** Slots */
      slots: components["schemas"]["AdvertisingSlot"][];
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Behavior */
      behavior: string;
      /** Url */
      url: string;
      /** Price */
      price?: number;
    };
    /** Page[AdvertisingUnit] */
    AdvertisingUnitPage: {
      /** Results */
      results: components["schemas"]["AdvertisingUnit"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** AdvertisingUnitInput */
    AdvertisingUnitInput: {
      /** Title */
      title?: string;
      /** Description */
      description?: string;
      /**
       * Behavior
       * @default
       */
      behavior: string;
      /**
       * Url
       * @default
       */
      url: string;
      /** Price */
      price?: number;
    };
    /** AdvertisingUnitUpdateInput */
    AdvertisingUnitUpdateInput: {
      /** Title */
      title?: string;
      /** Description */
      description?: string;
      /** Dates */
      dates: string[];
      /** Behavior */
      behavior?: string;
      /** Url */
      url?: string;
      /** Price */
      price?: number;
    };
    /**
     * Webhook
     * @description Webhooks are used to notify external services of events that occur in the
     *     system. For example, when a newsletter is sent, a webhook can be used to
     *     notify an external service that the newsletter has been sent.
     */
    Webhook: {
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      /** @description The type of event for which the webhook will be triggered. */
      event_type: components["schemas"]["ExternalEventType"];
      /**
       * Url
       * @description The URL to which the webhook will send POST requests.
       */
      url: string;
      /**
       * Description
       * @description An optional description of the webhook, for reference.
       */
      description?: string;
    };
    /** WebhookInput */
    WebhookInput: {
      /** @description The type of event for which the webhook will be triggered. */
      event_type: components["schemas"]["ExternalEventType"];
      /**
       * Url
       * @description The URL to which the webhook will send POST requests.
       */
      url: string;
      /**
       * Description
       * @description An optional description of the webhook, for reference.
       */
      description?: string;
    };
    /** Page[Webhook] */
    WebhookPage: {
      /** Results */
      results: components["schemas"]["Webhook"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /**
     * Comment
     * @description Comments are a way for subscribers to interact with newsletters. They're a way to
     *     provide feedback, ask questions, and generally engage with the content of an email.
     *     Comments exist in a tree structure; comments that reply to other comments are
     *     considered "children" of the parent comment.
     */
    Comment: {
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      /**
       * Email Id
       * Format: uuid
       */
      email_id: string;
      /**
       * Subscriber Id
       * Format: uuid
       */
      subscriber_id?: string;
      /**
       * Parent Id
       * Format: uuid
       * @description The ID of the parent comment, if this comment is a reply to another comment.
       */
      parent_id?: string;
      /** Text */
      text: string;
      subscriber?: components["schemas"]["Subscriber"];
      email?: components["schemas"]["Email"];
    };
    /** Page[Comment] */
    CommentPage: {
      /** Results */
      results: components["schemas"]["Comment"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** Response */
    Response: {
      /**
       * Id
       * Format: uuid
       * @description A unique UUID associated with the object.
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       * @description The date and time at which the object was created.
       */
      creation_date: string;
      /**
       * Answer
       * @description The answer given to the survey.
       */
      answer: string;
      /**
       * Text
       * @description Optional text included by the subscriber with the response. Subscribers are only prompted to supply a text response if the `is_freeform_response_enabled` field is set to `true` on the survey.
       */
      text: string;
      /**
       * Survey Id
       * Format: uuid
       */
      survey_id: string;
      survey?: components["schemas"]["Survey"];
      /**
       * Subscriber Id
       * Format: uuid
       */
      subscriber_id: string;
      subscriber?: components["schemas"]["Subscriber"];
      /**
       * Email Id
       * Format: uuid
       */
      email_id?: string;
      email?: components["schemas"]["Email"];
      /**
       * Automation Id
       * Format: uuid
       */
      automation_id?: string;
      automation?: components["schemas"]["Automation"];
    };
    /** Page[Response] */
    ResponsePage: {
      /** Results */
      results: components["schemas"]["Response"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** ResponseInput */
    ResponseInput: {
      /**
       * Subscriber Id
       * Format: uuid
       */
      subscriber_id: string;
      /**
       * Survey Id
       * Format: uuid
       */
      survey_id: string;
      /** Email Id */
      email_id: string;
      /** Answer */
      answer: number;
    };
    /**
     * EmailEventType
     * @description An enumeration.
     * @enum {string}
     */
    EmailEventType:
      | "activation_clicked"
      | "activation_delivered"
      | "activation_opened"
      | "bounced"
      | "complained"
      | "clicked"
      | "dropped"
      | "delivered"
      | "opened"
      | "sent"
      | "rejected"
      | "replied"
      | "unsubscribed";
    /** EmailEvent */
    EmailEvent: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Subscriber Id
       * Format: uuid
       */
      subscriber_id?: string;
      subscriber?: components["schemas"]["Subscriber"];
      /**
       * Email Id
       * Format: uuid
       */
      email_id?: string;
      email?: components["schemas"]["Email"];
      /**
       * Automation Id
       * Format: uuid
       */
      automation_id?: string;
      automation?: components["schemas"]["Automation"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /** Metadata */
      metadata: {
        [key: string]: string;
      };
      event_type: components["schemas"]["EmailEventType"];
    };
    /** Page[EmailEvent] */
    EmailEventPage: {
      /** Results */
      results: components["schemas"]["EmailEvent"][];
      /** Next */
      next?: string;
      /** Previous */
      previous?: string;
      /** Count */
      count: number;
    };
    /** @enum {string} */
    EmailExcludableField: "body";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  api_views_exports_list_exports: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExportPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_exports_create_export: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Export"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_CreateExportErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_exports_retrieve_export: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Export"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscriber_tags_list_tags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscriber_tags_create_tag: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscriber_tags_retrieve_tag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscriber_tags_delete_tag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscriber_tags_update_tag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_UpdateTagErrorCode_"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscriber_tags_retrieve_tag_analytics: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TagAnalytics"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_ping_ping: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Empty"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_images_create_image: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Image
           * Format: binary
           */
          image: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Image"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_images_delete_image: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_emails_routes_list_emails: {
    parameters: {
      query?: {
        /** @description Note that for historical reasons, if `status` is not included in the query, the default is to only return emails with a status of `about_to_send`, `in_flight`, or `sent`. This is a legacy behavior and may change in the future.
         *
         *     If you want to include drafts, you must explicitly include `draft` in the `status` query parameter. (Same thing with imported emails.)
         *      */
        status?: components["schemas"]["EmailStatus"][];
        automations?: string[];
        ids?: string[];
        ordering?:
          | "creation_date"
          | "-creation_date"
          | "status"
          | "-status"
          | "publish_date"
          | "-publish_date"
          | "subject"
          | "-subject"
          | "email_type"
          | "-email_type"
          | "modification_date"
          | "-modification_date"
          | "clicks"
          | "-clicks"
          | "opens"
          | "-opens"
          | "click_rate"
          | "-click_rate"
          | "open_rate"
          | "-open_rate"
          | "page_views__lifetime"
          | "-page_views__lifetime"
          | "page_views__30"
          | "-page_views__30"
          | "page_views__7"
          | "-page_views__7"
          | "webmentions"
          | "-webmentions"
          | "subscriptions"
          | "-subscriptions"
          | "paid_subscriptions"
          | "-paid_subscriptions"
          | "unsubscriptions"
          | "-unsubscriptions"
          | "replies"
          | "-replies"
          | "comments"
          | "-comments";
        creation_date__start?: string;
        creation_date__end?: string;
        publish_date__start?: string;
        publish_date__end?: string;
        excluded_fields?: components["schemas"]["EmailExcludableField"][];
        source?: components["schemas"]["EmailSource"][];
        email_type?: components["schemas"]["EmailType"][];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EmailPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_EmailListErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_emails_routes_create_email: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Email"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_EmailCreationErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_emails_routes_retrieve_email: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Email"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_emails_routes_update_email: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Email"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_emails_routes_retrieve_email_history: {
    parameters: {
      query: {
        field: string;
        page?: number;
        ordering?: "creation_date" | "-creation_date";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HistoryPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_emails_routes_retrieve_email_analytics: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Analytics"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_emails_routes_send_draft: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendDraftInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_list_subscribers: {
    parameters: {
      query?: {
        type?: components["schemas"]["SubscriberType"][];
        ids?: string[];
        email_address?: string;
        tag?: string[];
        "-tag"?: string;
        ordering?: string;
        utm_source?: string[];
        /** @description Filter by price ID. */
        price?: string[];
        /** @description Filter by coupon ID. */
        coupon?: string[];
        /** @description Filter by creation date. */
        date?: string[];
        last_open_date?: string[];
        last_click_date?: string[];
        /** @description If provided, only return subscribers that were imported by the given subscriber import. */
        subscriber_import?: string[];
        /** @description If provided, expand the given field. (Only supported fields: 'stripe_customer') */
        expand?: "stripe_customer"[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubscriberPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_ListSubscribersErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_create_subscriber: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriberInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Subscriber"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_CreateSubscriberErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_retrieve_subscriber: {
    parameters: {
      query?: {
        expand?: "stripe_customer"[];
      };
      header?: never;
      path: {
        id_or_email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Subscriber"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_delete_subscriber: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id_or_email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_update_subscriber: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id_or_email: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriberUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Subscriber"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_UpdateSubscriberErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_send_reminder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id_or_email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_send_email_to: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id_or_email: string;
        email_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Empty"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_get_clients: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id_or_email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClientPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_get_referrals: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id_or_email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubscriberPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_get_automations: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AutomationForSubscriberPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_subscribers_routes_get_stripe_subscriptions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id_or_email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StripeSubscriptionPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_newsletters_list_newsletters: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NewsletterPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_newsletters_create_newsletter: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewsletterInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Newsletter"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_CreateNewsletterErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_newsletters_delete_newsletter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_newsletters_update_newsletter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewsletterUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Newsletter"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_bulk_actions_create_bulk_action: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkActionInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BulkAction"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_bulk_actions_retrieve_bulk_action: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BulkAction"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_external_feeds_routes_list_external_feed: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExternalFeedPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_external_feeds_routes_create_external_feed: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExternalFeedInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExternalFeed"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_external_feeds_routes_retrieve_external_feed: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExternalFeed"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_external_feeds_routes_delete_external_feed: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_external_feeds_routes_update_external_feed: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExternalFeedUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExternalFeed"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_external_feeds_routes_retrieve_items: {
    parameters: {
      query?: {
        /** @description If provided, expand the given field. */
        expand?: "email"[];
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExternalFeedItemPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_external_feeds_routes_poll_items: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Empty"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_automations_routes_list_automations: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AutomationPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_automations_routes_create_automation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AutomationInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Automation"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_AutomationCreationErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_automations_routes_retrieve_automation_subscribers: {
    parameters: {
      query?: {
        /** @description If provided, expand the given field. (Only supported field: 'subscriber'). */
        expand?: "subscriber"[];
        page?: number;
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubscriberForAutomationPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_automations_routes_retrieve_automation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Automation"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_automations_routes_delete_automation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_automations_routes_update_automation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AutomationUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Automation"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_automations_routes_invoke_automation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_automations_routes_retrieve_automation_analytics: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Analytics"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_users_list_users: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_users_create_user: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_Failure_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_users_delete_user: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_users_update_user: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_prices_list_prices: {
    parameters: {
      query?: {
        /** @description If provided, expand the given field. */
        expand?: "product"[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PricePage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_ListPricesErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_prices_create_price: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PriceInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Price"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_CreatePriceErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_coupons_list_coupons: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StripeCouponPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_surveys_routes_list_surveys: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SurveyPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_surveys_routes_create_survey: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurveyInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_CreateSurveyErrorCode_"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_surveys_routes_retrieve_survey: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_surveys_routes_delete_survey: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_surveys_routes_update_survey: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurveyUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage_UpdateSurveyErrorCode_"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_api_requests_retrieve_api_request: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["APIRequestDetail"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_api_requests_list_api_requests: {
    parameters: {
      query?: {
        status_code?: string[];
        method?: string[];
        source?: components["schemas"]["APIRequestSource"][];
        version?: ("2024-07-01" | "2024-08-01" | "2024-08-15")[];
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["APIRequestPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_advertising_units_list_advertising_units: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdvertisingUnitPage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_advertising_units_create_advertising_unit: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdvertisingUnitInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdvertisingUnit"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_advertising_units_delete_advertising_unit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_advertising_units_update_advertising_unit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdvertisingUnitUpdateInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AdvertisingUnit"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_webhooks_list_webhooks: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebhookPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_webhooks_create_webhook: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_webhooks_retrieve_webhook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_webhooks_delete_webhook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_webhooks_update_webhook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookInput"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_webhooks_test_webhook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_comments_list_comments: {
    parameters: {
      query?: {
        /** @description If provided, only return comments for the given email. */
        email_id?: string;
        /** @description If provided, only return comments for the given subscriber. */
        subscriber_id?: string;
        /** @description If provided, expand the given field. (Only supported fields: 'subscriber', 'email'). */
        expand?: ("subscriber" | "email")[];
        ordering?:
          | "creation_date"
          | "-creation_date"
          | "email"
          | "-email"
          | "subscriber"
          | "-subscriber";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CommentPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_survey_responses_retrieve_survey_responses: {
    parameters: {
      query?: {
        /** @description If provided, only return responses made to the given email. */
        email?: string;
        /** @description If provided, only return responses made by the given subscriber. */
        subscriber?: string;
        /** @description If provided, only return responses made to the given survey. */
        survey?: string;
        creation_date__start?: string;
        creation_date__end?: string;
        /** @description If provided, expand the given field. */
        expand?: ("email" | "subscriber" | "survey" | "automation")[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResponsePage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_survey_responses_create_survey_response: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResponseInput"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_events_list_events: {
    parameters: {
      query?: {
        event_type?: components["schemas"]["EmailEventType"];
        ordering?: "creation_date" | "-creation_date";
        /** @description If provided, expand the given field. (Only supported field: 'subscriber'). */
        expand?: ("automation" | "subscriber" | "email")[];
        email_id?: string;
        automation_id?: string;
        subscriber_id?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EmailEventPage"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  api_views_events_get_event: {
    parameters: {
      query?: {
        /** @description If provided, expand the given field. (Only supported field: 'subscriber'). */
        expand?: ("automation" | "subscriber" | "email")[];
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EmailEvent"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
    };
  };
}
